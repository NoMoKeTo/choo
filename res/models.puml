@startuml

hide empty members

namespace types {
    class Coordinates {
        lat: float
        lon: float
    }
    class LiveTime {
        time: datetime
        delay: datetime
    }
    abstract class IFOPT {
    }
    class StopIFOPT {
        country
        area
        stop
    }
    IFOPT <|-- StopIFOPT
    class PlatformIFOPT {
        country
        area
        stop
        level
        quay
    }
    IFOPT <|-- PlatformIFOPT

    abstract class HierarchicEnumMixin {
    }
    class WayType {
    }
    HierarchicEnumMixin <|-- WayType

    class WayEvent {
    }
    HierarchicEnumMixin <|-- WayEvent

    class LineType {
    }
    HierarchicEnumMixin <|-- LineType

    class WalkSpeed {
    }
    class LineTypes {
    }
    LineTypes *-- LineType
}

namespace models {
    namespace base {
        abstract class Model {
        }
        abstract class ModelWithIDs {
            ids: dict
        }
        Model -|> ModelWithIDs
    }


    namespace locations {
        abstract class Model {
        }
        abstract class ModelWithIDs {
        }
        "models.base.Model" .. Model
        Model <|.. ModelWithIDs
        hide Model circle
        hide ModelWithIDs circle

        abstract class GeoPoint {
            coords: Coordinates
        }
        Model <|-- GeoPoint
        types.Coordinates -- GeoPoint : < coords

        class City {
            name: str
            country: str
            state: str
            official_id: str
        }
        ModelWithIDs <|- City

        abstract class Location {
            city: City
            name: str
        }
        GeoPoint <|-- Location
        City - Location : city >

        class Address {
            street: str
            number: str
            postcode: str
        }
        Location <|-- Address

        abstract class Addressable {
            address: Address
        }
        Location <|-- Addressable
        ModelWithIDs <|-- Addressable
        Address - Addressable : < address

        class Stop {
            ifopt: StopIFOPT
            uic: str
        }
        Addressable <|-- Stop
        types.StopIFOPT -- Stop : < ifopt

        class POI {
        }
        Addressable <|-- POI

        class Platform {
            stop: Stop
            ifopt: PlatformIFOPT
            name: str
            full_name: str
        }
        Location <|-- Platform
        ModelWithIDs <|-- Platform
        types.PlatformIFOPT -- Platform : < ifopt
        Stop- Platform : < stop
    }


    namespace ride {
        abstract class Model {
        }
        abstract class ModelWithIDs {
        }
        "models.base.Model" .. Model
        ModelWithIDs .|> Model
        hide Model circle
        hide ModelWithIDs circle

        class Line {
            linetype: LineType
            product: str
            name: str
            shortname: str
            route: str
            first_stop: Stop
            last_stop: Stop
            network: str
            operator: str
        }
        ModelWithIDs <|-- Line
        types.LineType -- Line : < linetype

        class MetaRide {
            line: Line
            number: str
            direction: str
            bike_friendly: bool
            annotation: Iterable[str]
        }
        ModelWithIDs <|-- Ride
        Line - MetaRide : < line

        class Ride {
            meta: MetaRide
            canceled: bool
            infotexts: Iterable[str]
        }
        ModelWithIDs <|-- MetaRide
        MetaRide -- Ride : < meta

        class RidePoint {
            ride: Ride
            platform: Platform
            stop: Stop
            arrival: LiveTime
            departure: LiveTime
            passthrough: bool
        }
        Model -|> RidePoint
        models.locations.Platform -- RidePoint : < platform
        models.locations.Stop -- RidePoint : < stop
        types.LiveTime -- RidePoint : < arrival/departure
        RidePoint -- Ride : ride >
    }


    namespace tickets {
        abstract class Model {
        }
        "models.base.Model" .. Model
        hide Model circle

        class TicketData {
            authority: str
            level: str
            price: float
            price_child: float
        }
        Model <|-- TicketData

        class TicketList {
            currency: str
            level_name: str
            single: TicketData
            bike: TicketData
            other: Mapping[str, TicketData]
        }
        Model <|-- TicketList
        TicketData - TicketList : < single
        TicketData - TicketList : < bike
    }


    namespace trip {
        abstract class Model {
        }
        "models.base.Model" .. Model
        hide Model circle

        class Trip {
            origin: Location
            via: Iterable[Location]
            destination: Location
            parts: list
            tickets: TicketList
            departure: LiveTime
            arrival: LiveTime
            linetypes: LineTypes
        }
        Model <|-- Trip
        Trip -- models.locations.Location : origin/destination/via >
        Trip -- models.tickets.TicketList : tickets >
        Trip -- types.LiveTime : departure/arrival >
        types.LineTypes -- Trip : < linetypes

        class Way {
            waytype: WayType
            origin: Location
            destination: Location
            distance: float
            duration: timedelta
            events: Iterable[WayEvent]
            path: Iterable[Coordinates]
        }
        Model <|-- Way
        types.WayType -- Way : < waytype
        models.locations.Location -- Way : < origin/destination
        types.WayEvent -- Way : < events
    }
}


@enduml
